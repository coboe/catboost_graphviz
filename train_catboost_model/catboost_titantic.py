### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4,
    ]
    float_feature_count = 5
    cat_feature_count = 6
    binary_feature_count = 31
    tree_count = 50
    float_feature_borders = [
        [2.5, 4.4848118, 8.2280598, 8.48347, 8.7402058, 9.0273867, 30.25, 46.5, 64.5],
        [0.5, 2.5],
        [1.5, 2.5, 4.5],
        [7.7458501, 12.1375, 16.049999, 26.125, 29.4125, 51.931252],
        [2.5, 4.5, 5.5, 9.5]
    ]
    tree_depth = [4, 2, 4, 4, 4, 4, 4, 3, 1, 4, 4, 4, 4, 2, 2, 4, 3, 4, 3, 4, 4, 4, 4, 2, 2, 4, 2, 2, 4, 4, 1, 4, 4, 0, 2, 2, 1, 4, 1, 4, 4, 3, 4, 4, 1, 4, 3, 1, 4, 4]
    tree_split_border = [255, 1, 2, 3, 255, 1, 255, 2, 2, 3, 255, 4, 3, 5, 255, 2, 4, 6, 8, 3, 6, 1, 3, 2, 5, 7, 6, 2, 3, 255, 5, 255, 5, 2, 255, 2, 3, 2, 2, 2, 1, 255, 4, 1, 2, 4, 9, 255, 2, 5, 4, 4, 3, 3, 5, 4, 5, 255, 2, 1, 1, 2, 255, 4, 3, 1, 5, 2, 3, 2, 255, 1, 7, 3, 2, 255, 3, 2, 1, 2, 7, 1, 8, 255, 4, 3, 1, 1, 3, 2, 5, 6, 8, 1, 1, 3, 2, 1, 2, 255, 3, 2, 1, 6, 2, 4, 1, 1, 1, 2, 5, 1, 3, 5, 2, 3, 2, 4, 5, 4, 4, 2, 2, 255, 6, 4, 3, 8, 1, 1, 5, 2, 1, 1, 9, 2, 3, 1, 1, 1, 1, 2, 2, 1, 6, 1, 3, 3, 4, 3, 2, 255, 2, 2, 2]
    tree_split_feature_index = [5, 4, 2, 3, 5, 8, 5, 7, 4, 0, 5, 4, 8, 8, 5, 9, 21, 0, 26, 4, 10, 1, 26, 4, 9, 0, 26, 21, 10, 5, 7, 5, 10, 18, 5, 0, 7, 2, 9, 1, 1, 5, 26, 2, 4, 3, 26, 5, 4, 26, 26, 8, 4, 24, 7, 23, 0, 5, 24, 27, 22, 28, 5, 26, 4, 19, 21, 30, 30, 4, 5, 0, 26, 23, 1, 6, 9, 27, 3, 26, 30, 23, 30, 5, 7, 14, 25, 18, 21, 25, 7, 26, 0, 11, 29, 23, 25, 9, 4, 5, 23, 23, 9, 9, 14, 9, 15, 17, 21, 19, 0, 20, 18, 30, 26, 2, 16, 24, 30, 10, 0, 1, 13, 5, 3, 30, 7, 26, 16, 10, 3, 20, 12, 13, 0, 4, 27, 28, 24, 26, 30, 8, 3, 7, 30, 14, 9, 9, 18, 28, 15, 5, 4, 19, 10]
    tree_split_xor_mask = [254, 0, 0, 0, 254, 0, 254, 0, 0, 0, 253, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 0, 253, 0, 0, 253, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0]
    cat_features_index = [0, 1, 2, 3, 4, 5]
    one_hot_cat_feature_index = [1, 4]
    one_hot_hash_values = [
        [-845129958, 2083200611],
        [-1536065541]
    ]
    ctr_feature_borders = [
        [1.999999046325684, 4.999999046325684, 5.999999046325684, 6.999999046325684, 7.999999046325684],
        [5.999999046325684, 7.999999046325684, 8.999999046325684, 10.99999904632568, 11.99999904632568],
        [4.999999046325684, 5.999999046325684, 6.999999046325684, 8.999999046325684, 13.99999904632568, 14.99999904632568],
        [5.999999046325684, 6.999999046325684, 7.999999046325684, 11.99999904632568, 12.99999904632568, 13.99999904632568],
        [4.999999046325684],
        [3.999999046325684],
        [12.99999904632568, 13.99999904632568],
        [1.999999046325684, 5.999999046325684, 6.999999046325684],
        [9.999999046325684, 11.99999904632568],
        [5.999999046325684, 9.999999046325684],
        [0.9999989867210388],
        [0.9999989867210388, 4.999999046325684, 10.99999904632568, 11.99999904632568],
        [5.999999046325684, 9.999999046325684],
        [7.999999046325684, 9.999999046325684],
        [1.999999046325684, 2.999999046325684, 5.999999046325684, 9.999999046325684, 11.99999904632568],
        [0.9999989867210388],
        [1.999999046325684, 7.999999046325684, 11.99999904632568, 12.99999904632568],
        [1.999999046325684, 4.999999046325684, 6.999999046325684, 10.99999904632568],
        [3.999999046325684, 4.999999046325684],
        [3.999999046325684, 4.999999046325684, 6.999999046325684, 7.999999046325684, 8.999999046325684, 10.99999904632568, 11.99999904632568, 12.99999904632568, 13.99999904632568],
        [7.999999046325684, 8.999999046325684, 10.99999904632568],
        [7.999999046325684, 8.999999046325684, 11.99999904632568],
        [14.99999904632568],
        [0.9999989867210388, 1.999999046325684, 6.999999046325684, 8.999999046325684, 9.999999046325684, 11.99999904632568, 12.99999904632568, 13.99999904632568]
    ]

    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        -0.16353818831431, 0.05565657455145503, -0.0356028914215673, 0.02266072511649897, 0, 0, 0, 0, -0.0646686843626858, 0.2175721293809706, -0.07217627259797892, 0.05615909655157952, 0, 0, -0.271098635406932, -0.04408082117891778,
        -0.1297249947851172, -0.009080733236420892, -0.07782284832528302, 0.2184208465873692,
        0.1890694682487377, 0.08333726456848543, 0.3506227533805122, 0.1522966385957588, -0.2022204029396091, -0.1923276415866539, 0, 0, -0.1280734851138423, 0.009588043304950953, -0.08686407174590027, 0.2024288524091577, -0.3201319979832067, -0.1407671200709366, -0.2014189427868835, 0.1255749905376987,
        0.03406988346051697, -0.1119362416995685, -0.2388974391006664, -0.2421873157963279, 0.2521328515931932, -0.02569289145068362, 0, 0, 0, 0, 0, 0, 0, -0.1992727195260689, 0, 0,
        -0.109442378456815, 0.08382747574916052, 0.02185584324787613, 0.2245178294372475, -0.03935329777044529, -0.06738517823835857, 0.3312429260596483, 0.1132360304712455, -0.07821702723614712, 0.01971825864726765, -0.02925650719286615, 0.1969874321742732, -0.1197329907657482, -0.04768827133957882, -0.08671363150587716, 0.1609614649979278,
        0.09379651660263971, -0.06765452447760165, 0, 0, 0.03020502024513692, -0.1072878104314988, -0.2062552787198017, 0, 0.12604712085304, -0.05297843900652555, 0.2009046743899119, -0.1807681973529096, -0.002675993609228392, -0.1373470712636755, -0.1224917707210002, -0.26647547876949,
        0.06637667307783525, -0.09292995159979689, -0.09731568198910288, -0.254005817233193, 0.03560483614085968, -0.00722379943249022, 0, 0, 0.04902891348122782, -0.0661852577412117, -0.0745203262584338, -0.1755955070796612, 0, 0, 0, 0,
        -0.005637872295488892, 0, 0.09957809888543302, -0.05328162159589347, 0.03827984261439285, -0.1233873797459333, -0.01780418231652951, -0.09427863951511381,
        0.0367276379420241, -0.05838718360994168,
        0.07673306672001502, 0.1545153063775554, -0.07245853053688907, -0.02894890412960753, -0.02104673340217907, 0, -0.05536261968795007, 0, 0.1496955138296928, 0.2228896289110226, -0.08228272455709219, 0.002085554593257509, -0.003166822366586916, 0, -0.08883421540008635, -0.1144641723293011,
        0.0475988673119951, 0.0288375304603892, -0.01342469842862029, -0.06817661977548389, 0.02262422441778044, 0.2869170077635603, 0.1307805834720165, -0.04416430918268466, 0, 0, -0.07683541955060935, -0.1430211299590582, 0, 0, 0.1662865637713088, -0.1015513039070511,
        -0.06133388421559145, -0.04408679383584264, 0, 0, -0.02721741283108844, -0.005883081671366131, -0.1617509873756287, -0.103868806403715, 0.01023187995980288, 0.1226818580700029, 0, 0, -0.02783596312483896, 0.09575805276423431, -0.09828952118827923, 0.1587038766129839,
        0.02325977340738356, -0.08452672332421006, 0.04649783202330885, -0.2077975826174989, -0.2751602514355873, 0, 0.07109850303332856, 0, 0.09713017413071204, 0.009385842296685612, 0.09150760652693428, -0.0007171775478263668, -0.2340458657061993, -0.1093570468635001, -0.08058975672100689, -0.2188667805316533,
        0.02136325388081376, 0, 0.01956928774867464, -0.04810162560223409,
        0.03607576149468073, -0.07839920741113887, -0.04325521745698493, -0.2137937909009527,
        0.05642214122063589, -0.04298379980052471, 0, 0.06243804490736012, -0.0592113760840724, -0.1937464513907036, 0, 0, 0.02425094496837285, -0.1122762025365997, -0.0005279546644946518, -0.09496673525127328, -0.06331560587805284, 0, 0, 0,
        0.04026465826339392, -0.04821883756851763, -0.1793612377040558, 0, -0.03807894557241793, 0.02502007684147232, 0, 0.06260819151926543,
        0, -0.05559562666294245, 0, -0.1553604987792439, 0, 0, 0, -0.1633544911138313, 0.09995674053351331, -0.05204034463111824, 0.007408042546304327, 0.01375815756089069, 0, 0.02004593850656711, 0.0924837681197003, 0.08058263399382803,
        0.007573891820585044, 0.08519490681028544, 0.01360946571122362, 0.02259596707891806, 0, 0, -0.04886406876819317, 0.02439841530662808,
        -0.04036780743951231, 0, 0.06403816102665437, 0, 0.0247723652084575, 0.01674968129559479, 0.05479683717698909, 0, 0.01648412658131784, -0.1974351316687868, -0.003600645501739491, 0, -0.03089425547694929, -0.06110720401811618, -0.02675997851267877, -0.1597049527130291,
        0.1686290640689087, 0.2742510017210948, 0, -0.1911420562526872, -0.3102167157703362, 0.2617463999386311, 0, -0.1749797560831518, 0.02398542414682501, -0.04387104240811563, -0.1045302480737449, -0.09787150097621854, 0.09855132678281589, 0.01394520367606532, 0.1665401274936019, -0.07592062494329081,
        0.01299112405866915, -0.03042958527831652, -0.01717195841121497, 0, 0.2062452694212697, 0, 0, 0, 0.03737609002243007, -0.01693857137556958, 0.03508528604420001, 0, -0.07286546452141365, -0.1445936922207322, 0, 0,
        0.1374299787950367, -0.02457671505951282, 0, 0, 0.01247447756284563, 0.02993228607815166, 0.02172791379434457, 0.0529639730536174, -0.02938228352062432, -0.2857552679763715, -0.09017361899097891, -0.189061071818053, -0.02845479590237648, 0.005771588439852472, 0.07701118103061899, 0.02763620726561394,
        -0.02351333412200124, -0.05355237482742014, 0.03436067891857172, -0.01692317765430235,
        0.05908009311995199, 0.006066230921236902, 0.02072119576403062, -0.03371399981371934,
        0, 0, 0, 0, -0.04382999894938348, 0, 0, 0.2417206319396394, -0.05491421512501453, -0.01421740274961581, -0.02656623119741378, 0, 0.04966243768511253, 0.04816111638406449, -0.03336693586441813, -0.03804709102764708,
        -0.01507928940468695, -0.02816506772426975, 0.04458615535022232, 0.001501707774370738,
        0.005190178656183051, 0.04583544868943583, -0.02971851432534495, 0.003233080043775273,
        -0.01019881489452413, -0.04836738721628697, 0.01036501153928611, -0.03979113261029427, -0.01324917661062545, 0.1145547503104956, 0.0398756498955206, 0.05789984297830893, -0.01398241962558766, 0, 0.02451126726730658, -0.1294978096310095, 0.1341160119421975, 0, 0.07855298317181297, 0.08589452570892729,
        -0.01683435935110579, 0.359895217449117, -0.02310014915477065, 0.008252793139626088, -0.1334404556417278, -0.08869205180562267, -0.09569505485954397, 0, 0, -0.006924115243694475, 0, 0.0668174110252565, 0, -0.09254091380095476, 0, 0.06467499518200399,
        -0.004079471507991922, -0.0002869238735286015,
        -0.0006708439901874289, 0.0258951378384273, 0.006417957590541735, 0.0862490254930202, 0, 0, 0.004901676477312642, 0, -0.01021081644136062, -0.04153599300653446, -0.05725300265471316, 0.0510448138312429, 0, 0, 0.03312981273367138, 0,
        0, 0, 0, 0, 0.006975558751837766, -0.1723218304787474, -0.02453881378134185, 0.04198660159371882, 0, 0, 0, 0, -0.02256318333371032, 0.009371553988017253, 0.04356453388378861, 0.06884508060956909,
        -0.003183275755643812,
        0.03217264550317914, 0.1648606757507783, -0.009082194174863355, -0.02458359377642292,
        -0.007718006688326664, 0.01719563872476408, 0, -0.1147272090254406,
        0.02493471791783411, -0.01081486735843122,
        0.0153430237096438, -0.01077061203423425, 0, -0.02715951714876003, 0.09168407087847978, 0.05103293690030294, 0, 0, -0.02315315088763334, -0.1466192260983787, 0.02403064574341126, 0, 0.04444912480806916, 0.02186880276940096, -0.1670887449687352, 0,
        0.02277477181164745, -0.009731312339568546,
        0.1103921271443972, 0.09042328587414918, 0.0001008970428943723, -0.01692918308190693, 0, -0.08287318608900869, 0.04958776498505248, -0.01442207286024555, 0, 0, 0, 0, 0, 0, 0, 0,
        0.01431034514529926, -0.01470162661494252, 0, 0.07283609020921521, -0.009400550514551081, -0.009366008386437768, 0.1510218793317495, -0.1511393524155304, 0.0218927162376142, 0.04286725515402116, 0.01545643846794209, 0.05448502235339003, -0.05458179166862518, 0.05587575016915906, -0.0983731255517601, 0.2009974146092989,
        -0.2498021486766958, -0.05195770634743156, 0.05102788277467573, -0.1154751435509012, 0.05577392729498704, -0.003140097830871365, -0.005241063420235006, 0.002150021417283089,
        -0.006142255134358538, 0.03373980900263329, 0, 0, -0.008098381604678141, 0.01021812549146932, 0.006124474197485347, 0.002701123414504043, 0, 0, 0, 0, -0.118324668611286, -0.008043274233004306, 0, 0.05261637622799914,
        -0.0008087445791228722, -0.04050678004324766, -0.06480620944679065, 0, 0, 0, 0, 0, 0.03067100400949516, -0.2383682103487214, 0.01953575499168792, 0, -0.03404483137291808, 0, 0, 0,
        -0.1778666691160858, -0.0006635745740660096,
        -0.1256913429888157, -0.03645142821495054, 0.09141773885632556, -0.009720224005442661, 0, -0.09181110440869888, -0.1942197056730706, -0.02502972037488138, 0.2417354668937631, 0.1310077028213839, 0.003278970794933203, -0.01581674542817212, 0.2284638220913688, 0.03329503947917171, -0.004787242184846937, -0.002781092038551147,
        0, -0.06591813556193858, 0, 0.01383398714997938, -0.1136455626826717, 0.02041042531281775, 0.145432095875009, -0.007337497673186358,
        -0.004550061570280888, 0.005491291000529492,
        -0.006151148562580722, 0.001053080921256132, 0, 0, -0.1964520402301304, -0.04945861452510359, 0, 0, 0.02761145155506735, 0.06424737882495056, 0, 0, 0, 0.07474672222084734, 0, 0,
        -0.009928689307904436, 0.03966046931321428, -0.09695151917376064, 0.1745059029615612, -0.0008232555138376101, 0.1153040901537915, 0, 0, 0.003813185997228235, 0.002749997599357479, -0.08434870905690205, -0.06966962087801928, -0.1422044924311421, -0.01911114208471249, 0, 0
    ]
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 24,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [0],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387096, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387096, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387096, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696983, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [0],
                    binarized_indexes = [
                        catboost_bin_feature_index_value(bin_index = 0, check_value_equal = 0, value = 8)
                    ]
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 11451318432423771014, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [0],
                    binarized_indexes = [
                        catboost_bin_feature_index_value(bin_index = 3, check_value_equal = 0, value = 5)
                    ]
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 7972260680463051264, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [0, 2],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 4230580741178164250, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 1556522015870898837, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [0, 3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 4230580741178164251, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 4230580741178164251, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 4230580741178164251, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [2],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387098, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387098, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387098, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696981, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [2],
                    binarized_indexes = [
                        catboost_bin_feature_index_value(bin_index = 5, check_value_equal = 1, value = 2)
                    ]
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 9186992878168382910, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696980, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [5],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696978, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                1556522015870898837 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 4215264814991599106 : 6, 6066073030442430050 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 2975384202102641446 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 7293718060310654473 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 17198608338017644589 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7211139722917923156 : 8, 18426253367885869012 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 2987619785123374683 : 4, 10289592968236978523 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 353,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.77965e-43, count = 87), catboost_ctr_mean_history(sum = 9.24857e-44, count = 353), catboost_ctr_mean_history(sum = 2.29813e-43, count = 72), catboost_ctr_mean_history(sum = 2.38221e-44, count = 2)],
                    ctr_total = [127, 87, 66, 353, 164, 72, 17, 2, 3]
                ),
                4230580741178164250 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 4215264814991599106 : 6, 6066073030442430050 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 2975384202102641446 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 7293718060310654473 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 17198608338017644589 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7211139722917923156 : 8, 18426253367885869012 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 2987619785123374683 : 4, 10289592968236978523 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 7.42688e-44, count = 74), catboost_ctr_mean_history(sum = 3.64338e-44, count = 61), catboost_ctr_mean_history(sum = 5.74532e-44, count = 25), catboost_ctr_mean_history(sum = 4.00771e-43, count = 67), catboost_ctr_mean_history(sum = 1.23314e-43, count = 76), catboost_ctr_mean_history(sum = 6.30584e-44, count = 27), catboost_ctr_mean_history(sum = 1.12104e-44, count = 9), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1), catboost_ctr_mean_history(sum = 1.4013e-45, count = 2)],
                    ctr_total = [53, 74, 26, 61, 41, 25, 286, 67, 88, 76, 45, 27, 8, 9, 1, 1, 1, 2]
                ),
                4230580741178164251 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 3460349855465020547 : 5, 3148616341639852292 : 13, 15429922998958651844 : 6, 7204271446344745542 : 15, 18446744073709551615 : 0, 18446744073709551615 : 0, 3372926820088345033 : 18, 11948905200930586890 : 0, 6538803100784075914 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 14281151649215066831 : 16, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 17671338408359290453 : 1, 14567292864597114517 : 12, 11194167478143370134 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 17645746109916169884 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 18151027358539524959 : 19, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 14539207992871913956 : 14, 18446744073709551615 : 0, 18446744073709551615 : 0, 10331537343781832807 : 10, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 13915271837724243249 : 11, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 16184660721745868600 : 8, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 70163096320796925 : 9, 13188484602594786942 : 17, 816369893355372351 : 3},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 9.80909e-44, count = 37), catboost_ctr_mean_history(sum = 2.8026e-45, count = 44), catboost_ctr_mean_history(sum = 2.94273e-44, count = 21), catboost_ctr_mean_history(sum = 3.96567e-43, count = 36), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3), catboost_ctr_mean_history(sum = 2.8026e-45, count = 32), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0), catboost_ctr_mean_history(sum = 7.14662e-44, count = 51), catboost_ctr_mean_history(sum = 1.16308e-43, count = 8), catboost_ctr_mean_history(sum = 0, count = 9), catboost_ctr_mean_history(sum = 1.4013e-45, count = 41), catboost_ctr_mean_history(sum = 0, count = 3), catboost_ctr_mean_history(sum = 5.60519e-45, count = 37), catboost_ctr_mean_history(sum = 2.38221e-44, count = 11), catboost_ctr_mean_history(sum = 8.40779e-45, count = 0), catboost_ctr_mean_history(sum = 1.4013e-45, count = 2), catboost_ctr_mean_history(sum = 0, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1), catboost_ctr_mean_history(sum = 4.2039e-45, count = 2), catboost_ctr_mean_history(sum = 0, count = 1)],
                    ctr_total = [70, 37, 2, 44, 21, 21, 283, 36, 2, 3, 2, 32, 2, 0, 51, 51, 83, 8, 0, 9, 1, 41, 0, 3, 4, 37, 17, 11, 6, 0, 1, 2, 0, 3, 1, 1, 3, 2, 0, 1]
                ),
                7972260680463051264 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 10338539325041132290 : 1, 18446744073709551615 : 0, 11991183114131542228 : 4, 18446744073709551615 : 0, 7755427593316260518 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 15069636359450597595 : 5, 7260086079722076923 : 3, 3024330558906795213 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 3.22299e-44, count = 16), catboost_ctr_mean_history(sum = 4.7504e-43, count = 111), catboost_ctr_mean_history(sum = 7.9874e-44, count = 120), catboost_ctr_mean_history(sum = 1.20512e-43, count = 73), catboost_ctr_mean_history(sum = 1.54143e-44, count = 14), catboost_ctr_mean_history(sum = 4.62428e-44, count = 8)],
                    ctr_total = [23, 16, 339, 111, 57, 120, 86, 73, 11, 14, 33, 8]
                ),
                9186992878168382910 :
                catboost_ctr_value_table(
                    index_hash_viewer = {6581190714162445536 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 16524775594144466627 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 4657686869700317686 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 11312287748571910841 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 2809128554844380316 : 3, 18373333909000403997 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.10073e-43, count = 77), catboost_ctr_mean_history(sum = 1.26117e-44, count = 66), catboost_ctr_mean_history(sum = 8.82818e-44, count = 140), catboost_ctr_mean_history(sum = 9.24857e-44, count = 29), catboost_ctr_mean_history(sum = 1.26117e-44, count = 27), catboost_ctr_mean_history(sum = 5.32493e-44, count = 3)],
                    ctr_total = [364, 77, 9, 66, 63, 140, 66, 29, 9, 27, 38, 3]
                ),
                11451318432423771014 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 10338539325041132290 : 2, 18446744073709551615 : 0, 11991183114131542228 : 5, 18446744073709551615 : 0, 7755427593316260518 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 15069636359450597595 : 4, 7260086079722076923 : 3, 3024330558906795213 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 7.14662e-44, count = 106), catboost_ctr_mean_history(sum = 4.06377e-44, count = 30), catboost_ctr_mean_history(sum = 4.98862e-43, count = 118), catboost_ctr_mean_history(sum = 1.14906e-43, count = 80), catboost_ctr_mean_history(sum = 2.24208e-44, count = 1), catboost_ctr_mean_history(sum = 2.10195e-44, count = 7)],
                    ctr_total = [51, 106, 29, 30, 356, 118, 82, 80, 16, 1, 15, 7]
                ),
                14216163332699387096 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 10650234391120027977 : 0, 3644720124901778394 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 6692239851685836511 : 2},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.12104e-43, count = 136), catboost_ctr_mean_history(sum = 5.21283e-43, count = 119), catboost_ctr_mean_history(sum = 1.35926e-43, count = 87)],
                    ctr_total = [80, 136, 372, 119, 97, 87]
                ),
                14216163332699387098 :
                catboost_ctr_value_table(
                    index_hash_viewer = {14174277779110849376 : 0, 18397797716905397849 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 15401922808979073799 : 1},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.98354e-43, count = 217), catboost_ctr_mean_history(sum = 1.05097e-43, count = 95), catboost_ctr_mean_history(sum = 6.5861e-44, count = 30)],
                    ctr_total = [427, 217, 75, 95, 47, 30]
                ),
                14216163332699387099 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 11256821090308271618 : 4, 18446744073709551615 : 0, 10890941278817448036 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 14647007849452495240 : 1, 8169836919236574921 : 3, 7279121913149837033 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10164154043687991729 : 8, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 4179940887437950329 : 7, 7307206784875037594 : 2, 18446744073709551615 : 0, 348596261181549820 : 9, 8924574642023791677 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 6.10966e-43, count = 81), catboost_ctr_mean_history(sum = 7.70714e-44, count = 127), catboost_ctr_mean_history(sum = 3.64338e-44, count = 99), catboost_ctr_mean_history(sum = 5.60519e-45, count = 3), catboost_ctr_mean_history(sum = 2.38221e-44, count = 23), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 8.40779e-45, count = 0), catboost_ctr_mean_history(sum = 1.4013e-45, count = 2), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1), catboost_ctr_mean_history(sum = 4.2039e-45, count = 2)],
                    ctr_total = [436, 81, 55, 127, 26, 99, 4, 3, 17, 23, 0, 4, 6, 0, 1, 2, 1, 1, 3, 2]
                ),
                14216163332699387101 :
                catboost_ctr_value_table(
                    index_hash_viewer = {10975433720605981792 : 5, 4708652622768927617 : 8, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 17986950036752689285 : 4, 1204349503549813318 : 2, 15401922808979073799 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 12992890186830721003 : 6, 18446744073709551615 : 0, 119219320642797485 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 7678666885144650192 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 15240918170895855923 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 3.36312e-44, count = 35), catboost_ctr_mean_history(sum = 6.74025e-43, count = 206), catboost_ctr_mean_history(sum = 1.12104e-44, count = 25), catboost_ctr_mean_history(sum = 1.68156e-44, count = 35), catboost_ctr_mean_history(sum = 1.12104e-44, count = 24), catboost_ctr_mean_history(sum = 7.00649e-45, count = 8), catboost_ctr_mean_history(sum = 2.8026e-45, count = 2), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0), catboost_ctr_mean_history(sum = 1.12104e-44, count = 7)],
                    ctr_total = [24, 35, 481, 206, 8, 25, 12, 35, 8, 24, 5, 8, 2, 2, 1, 0, 8, 7]
                ),
                16890222057671696978 :
                catboost_ctr_value_table(
                    index_hash_viewer = {10975433720605981792 : 5, 4708652622768927617 : 8, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 17986950036752689285 : 4, 1204349503549813318 : 2, 15401922808979073799 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 12992890186830721003 : 6, 18446744073709551615 : 0, 119219320642797485 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 7678666885144650192 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 15240918170895855923 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 687,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 8.26766e-44, count = 687), catboost_ctr_mean_history(sum = 4.62428e-44, count = 47), catboost_ctr_mean_history(sum = 4.48416e-44, count = 13), catboost_ctr_mean_history(sum = 5.60519e-45, count = 1)],
                    ctr_total = [59, 687, 33, 47, 32, 13, 4, 1, 15]
                ),
                16890222057671696980 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 11256821090308271618 : 4, 18446744073709551615 : 0, 10890941278817448036 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 14647007849452495240 : 1, 8169836919236574921 : 3, 7279121913149837033 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10164154043687991729 : 8, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 4179940887437950329 : 7, 7307206784875037594 : 2, 18446744073709551615 : 0, 348596261181549820 : 9, 8924574642023791677 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 517,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 7.24471e-43, count = 182), catboost_ctr_mean_history(sum = 1.75162e-43, count = 7), catboost_ctr_mean_history(sum = 5.60519e-44, count = 4), catboost_ctr_mean_history(sum = 8.40779e-45, count = 3), catboost_ctr_mean_history(sum = 2.8026e-45, count = 5)],
                    ctr_total = [517, 182, 125, 7, 40, 4, 6, 3, 2, 5]
                ),
                16890222057671696981 :
                catboost_ctr_value_table(
                    index_hash_viewer = {14174277779110849376 : 0, 18397797716905397849 : 2, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 15401922808979073799 : 1},
                    target_classes_count = 0,
                    counter_denominator = 644,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 9.02436e-43, count = 170)],
                    ctr_total = [644, 170, 77]
                ),
                16890222057671696983 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 10650234391120027977 : 0, 3644720124901778394 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 6692239851685836511 : 2},
                    target_classes_count = 0,
                    counter_denominator = 491,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 3.0268e-43, count = 491)],
                    ctr_total = [216, 491, 184]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1



cat_features_hashes = {
    "Q": -1689899903,
    "share": -1536065541,
    "Dr": -1417844111,
    "F": -1292729504,
    "2": -1284790409,
    "C": -1100768289,
    "E": -1095458675,
    "Col": -1021664359,
    "female": -845129958,
    "unique": -384207187,
    "S": -262092192,
    "B": -254607792,
    "D": -204260682,
    "Master": -13790510,
    "T": 311401451,
    "Lady": 550355105,
    "3": 593172586,
    "1": 1121341681,
    "Mlle": 1268531460,
    "A": 1343633897,
    "Sir": 1570786140,
    "Rev": 1590577041,
    "G": 1719715171,
    "X": 1839542261,
    "Mrs": 1895931434,
    "Mr": 2001528581,
    "Miss": 2044645576,
    "male": 2083200611,
}

def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model

def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    prediction : formula value for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        for border in model.float_feature_borders[i]:
            binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
        binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            for border_idx in range(len(model.one_hot_hash_values[i])):
                binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
            binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    result = 0.
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        result += model.leaf_values[current_tree_leaf_values_index + index]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return result



